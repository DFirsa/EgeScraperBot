/*
 * This file is generated by jOOQ.
 */
package ege.bot.service.codegen.models.tables


import ege.bot.service.codegen.models.Results
import ege.bot.service.codegen.models.indexes.IX_RESULT_NOT_REPORTED
import ege.bot.service.codegen.models.keys.EXAM_RESULT_PKEY
import ege.bot.service.codegen.models.keys.EXAM_RESULT__FK_STUDENT_ID
import ege.bot.service.codegen.models.tables.records.ExamResultRecord

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * Results table
 */
@Suppress("UNCHECKED_CAST")
open class ExamResult(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, ExamResultRecord>?,
    aliased: Table<ExamResultRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<ExamResultRecord>(
    alias,
    Results.RESULTS,
    child,
    path,
    aliased,
    parameters,
    DSL.comment("Results table"),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>results.exam_result</code>
         */
        val EXAM_RESULT: ExamResult = ExamResult()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ExamResultRecord> = ExamResultRecord::class.java

    /**
     * The column <code>results.exam_result.exam_name</code>. Name of the exam
     */
    val EXAM_NAME: TableField<ExamResultRecord, String?> = createField(DSL.name("exam_name"), SQLDataType.CLOB.nullable(false), this, "Name of the exam")

    /**
     * The column <code>results.exam_result.absolute_result</code>. Results,
     * which is represented as exam passed or not
     */
    val ABSOLUTE_RESULT: TableField<ExamResultRecord, Int?> = createField(DSL.name("absolute_result"), SQLDataType.INTEGER, this, "Results, which is represented as exam passed or not")

    /**
     * The column <code>results.exam_result.is_passed_result</code>.
     */
    val IS_PASSED_RESULT: TableField<ExamResultRecord, Boolean?> = createField(DSL.name("is_passed_result"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>results.exam_result.student_id</code>. Student who's
     * result it is
     */
    val STUDENT_ID: TableField<ExamResultRecord, Long?> = createField(DSL.name("student_id"), SQLDataType.BIGINT.nullable(false), this, "Student who's result it is")

    /**
     * The column <code>results.exam_result.is_reported</code>. Is result has
     * been reported to user
     */
    val IS_REPORTED: TableField<ExamResultRecord, Boolean?> = createField(DSL.name("is_reported"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "Is result has been reported to user")

    private constructor(alias: Name, aliased: Table<ExamResultRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<ExamResultRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>results.exam_result</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>results.exam_result</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>results.exam_result</code> table reference
     */
    constructor(): this(DSL.name("exam_result"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, ExamResultRecord>): this(Internal.createPathAlias(child, key), child, key, EXAM_RESULT, null)
    override fun getSchema(): Schema? = if (aliased()) null else Results.RESULTS
    override fun getIndexes(): List<Index> = listOf(IX_RESULT_NOT_REPORTED)
    override fun getPrimaryKey(): UniqueKey<ExamResultRecord> = EXAM_RESULT_PKEY
    override fun getReferences(): List<ForeignKey<ExamResultRecord, *>> = listOf(EXAM_RESULT__FK_STUDENT_ID)

    private lateinit var _student: Student

    /**
     * Get the implicit join path to the <code>results.student</code> table.
     */
    fun student(): Student {
        if (!this::_student.isInitialized)
            _student = Student(this, EXAM_RESULT__FK_STUDENT_ID)

        return _student;
    }

    val student: Student
        get(): Student = student()
    override fun `as`(alias: String): ExamResult = ExamResult(DSL.name(alias), this)
    override fun `as`(alias: Name): ExamResult = ExamResult(alias, this)
    override fun `as`(alias: Table<*>): ExamResult = ExamResult(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ExamResult = ExamResult(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ExamResult = ExamResult(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): ExamResult = ExamResult(name.getQualifiedName(), null)
}
