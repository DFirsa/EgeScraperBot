/*
 * This file is generated by jOOQ.
 */
package ege.bot.service.codegen.models.tables


import ege.bot.service.codegen.models.Results
import ege.bot.service.codegen.models.indexes.IX_STUDENT_YEAR
import ege.bot.service.codegen.models.keys.STUDENT_CHAT_ID_PASSPORT_SERIES_PASSPORT_NUMBER_KEY
import ege.bot.service.codegen.models.keys.STUDENT_PKEY
import ege.bot.service.codegen.models.keys.STUDENT__FK_CHAT_ID
import ege.bot.service.codegen.models.tables.records.StudentRecord

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * Students'es data
 */
@Suppress("UNCHECKED_CAST")
open class Student(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, StudentRecord>?,
    aliased: Table<StudentRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<StudentRecord>(
    alias,
    Results.RESULTS,
    child,
    path,
    aliased,
    parameters,
    DSL.comment("Students'es data"),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>results.student</code>
         */
        val STUDENT: Student = Student()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<StudentRecord> = StudentRecord::class.java

    /**
     * The column <code>results.student.id</code>. Id of student
     */
    val ID: TableField<StudentRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("nextval('results.student_id'::regclass)"), SQLDataType.BIGINT)), this, "Id of student")

    /**
     * The column <code>results.student.chat_id</code>. Id from table chat
     */
    val CHAT_ID: TableField<StudentRecord, Long?> = createField(DSL.name("chat_id"), SQLDataType.BIGINT.nullable(false), this, "Id from table chat")

    /**
     * The column <code>results.student.passport_series</code>. Passport's
     * series
     */
    val PASSPORT_SERIES: TableField<StudentRecord, String?> = createField(DSL.name("passport_series"), SQLDataType.CLOB.nullable(false), this, "Passport's series")

    /**
     * The column <code>results.student.passport_number</code>. Passport's
     * number
     */
    val PASSPORT_NUMBER: TableField<StudentRecord, String?> = createField(DSL.name("passport_number"), SQLDataType.CLOB.nullable(false), this, "Passport's number")

    /**
     * The column <code>results.student.surname</code>. Student's surname
     */
    val SURNAME: TableField<StudentRecord, String?> = createField(DSL.name("surname"), SQLDataType.CLOB.nullable(false), this, "Student's surname")

    /**
     * The column <code>results.student.exam_type</code>. Type of exam (EGE/OGE)
     */
    val EXAM_TYPE: TableField<StudentRecord, String?> = createField(DSL.name("exam_type"), SQLDataType.CLOB.nullable(false), this, "Type of exam (EGE/OGE)")

    /**
     * The column <code>results.student.exam_year</code>. Year when student
     * passe's exam
     */
    val EXAM_YEAR: TableField<StudentRecord, Short?> = createField(DSL.name("exam_year"), SQLDataType.SMALLINT.nullable(false), this, "Year when student passe's exam")

    private constructor(alias: Name, aliased: Table<StudentRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<StudentRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>results.student</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>results.student</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>results.student</code> table reference
     */
    constructor(): this(DSL.name("student"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, StudentRecord>): this(Internal.createPathAlias(child, key), child, key, STUDENT, null)
    override fun getSchema(): Schema? = if (aliased()) null else Results.RESULTS
    override fun getIndexes(): List<Index> = listOf(IX_STUDENT_YEAR)
    override fun getPrimaryKey(): UniqueKey<StudentRecord> = STUDENT_PKEY
    override fun getUniqueKeys(): List<UniqueKey<StudentRecord>> = listOf(STUDENT_CHAT_ID_PASSPORT_SERIES_PASSPORT_NUMBER_KEY)
    override fun getReferences(): List<ForeignKey<StudentRecord, *>> = listOf(STUDENT__FK_CHAT_ID)

    private lateinit var _chat: Chat

    /**
     * Get the implicit join path to the <code>results.chat</code> table.
     */
    fun chat(): Chat {
        if (!this::_chat.isInitialized)
            _chat = Chat(this, STUDENT__FK_CHAT_ID)

        return _chat;
    }

    val chat: Chat
        get(): Chat = chat()
    override fun `as`(alias: String): Student = Student(DSL.name(alias), this)
    override fun `as`(alias: Name): Student = Student(alias, this)
    override fun `as`(alias: Table<*>): Student = Student(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Student = Student(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Student = Student(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Student = Student(name.getQualifiedName(), null)
}
