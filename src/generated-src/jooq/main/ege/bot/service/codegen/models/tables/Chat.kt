/*
 * This file is generated by jOOQ.
 */
package ege.bot.service.codegen.models.tables


import ege.bot.service.codegen.models.Results
import ege.bot.service.codegen.models.keys.CHAT_PKEY
import ege.bot.service.codegen.models.tables.records.ChatRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * Table with chats (e.g. users)
 */
@Suppress("UNCHECKED_CAST")
open class Chat(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, ChatRecord>?,
    aliased: Table<ChatRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<ChatRecord>(
    alias,
    Results.RESULTS,
    child,
    path,
    aliased,
    parameters,
    DSL.comment("Table with chats (e.g. users)"),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>results.chat</code>
         */
        val CHAT: Chat = Chat()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ChatRecord> = ChatRecord::class.java

    /**
     * The column <code>results.chat.id</code>. Chat id from telegram
     */
    val ID: TableField<ChatRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "Chat id from telegram")

    /**
     * The column <code>results.chat.chat_mode</code>. Chat type
     * (TEACHER_CHAT/USER_CHAT). If you're teacher you're able to get results
     * for multiple students
     */
    val CHAT_MODE: TableField<ChatRecord, String?> = createField(DSL.name("chat_mode"), SQLDataType.CLOB.nullable(false), this, "Chat type (TEACHER_CHAT/USER_CHAT). If you're teacher you're able to get results for multiple students")

    private constructor(alias: Name, aliased: Table<ChatRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<ChatRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>results.chat</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>results.chat</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>results.chat</code> table reference
     */
    constructor(): this(DSL.name("chat"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, ChatRecord>): this(Internal.createPathAlias(child, key), child, key, CHAT, null)
    override fun getSchema(): Schema? = if (aliased()) null else Results.RESULTS
    override fun getPrimaryKey(): UniqueKey<ChatRecord> = CHAT_PKEY
    override fun `as`(alias: String): Chat = Chat(DSL.name(alias), this)
    override fun `as`(alias: Name): Chat = Chat(alias, this)
    override fun `as`(alias: Table<*>): Chat = Chat(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Chat = Chat(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Chat = Chat(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Chat = Chat(name.getQualifiedName(), null)
}
