/*
 * This file is generated by jOOQ.
 */
package ege.bot.service.codegen.models.tables.records


import ege.bot.service.codegen.models.tables.ExamResult

import org.jooq.Record2
import org.jooq.impl.UpdatableRecordImpl


/**
 * Results table
 */
@Suppress("UNCHECKED_CAST")
open class ExamResultRecord() : UpdatableRecordImpl<ExamResultRecord>(ExamResult.EXAM_RESULT) {

    open var examName: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var absoluteResult: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    @Suppress("INAPPLICABLE_JVM_NAME")
    @set:JvmName("setIsPassedResult")
    open var isPassedResult: Boolean?
        set(value): Unit = set(2, value)
        get(): Boolean? = get(2) as Boolean?

    open var studentId: Long?
        set(value): Unit = set(3, value)
        get(): Long? = get(3) as Long?

    @Suppress("INAPPLICABLE_JVM_NAME")
    @set:JvmName("setIsReported")
    open var isReported: Boolean?
        set(value): Unit = set(4, value)
        get(): Boolean? = get(4) as Boolean?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record2<String?, Long?> = super.key() as Record2<String?, Long?>

    /**
     * Create a detached, initialised ExamResultRecord
     */
    constructor(examName: String? = null, absoluteResult: Int? = null, isPassedResult: Boolean? = null, studentId: Long? = null, isReported: Boolean? = null): this() {
        this.examName = examName
        this.absoluteResult = absoluteResult
        this.isPassedResult = isPassedResult
        this.studentId = studentId
        this.isReported = isReported
        resetChangedOnNotNull()
    }
}
